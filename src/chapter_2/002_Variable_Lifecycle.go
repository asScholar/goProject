/*
第四节，Go语言变量生命周期，Go语言变量逃逸分析
什么是栈？栈是一种特殊拥有特殊规则的线性表数据结构。栈只允许线性表的一端放入数据，按后进先出的原则进行操作。
变量和栈有什么关系？栈可用于内存分配，栈的分配和回收速度非常快。例如，自定义函数中的局部变量就是分配在栈上的。
什么是堆？堆在内存分配中类似于往一个房间里摆放各种家具，家具的尺寸有大有小。分配内存时，需要找一块足够装下家具的空间再摆放家具。经过反复摆放和腾空家具后，房间里的空间会变得乱七八糟，此时再往空间里摆放家具会存在虽然有足够的空间，但各空间分布在不同的区域，无法有一段连续的空间来摆放家具，此时内存分配器需要对这些空间进行调整优化。
*/
package main

import (
	"fmt"
)

/*
变量逃逸 - 自动决定变量分配方式，提高运行效率
执行命令：go run -gcflags “-m -l” 002_Variable_Lifecycle.go
*/
/*本函数测试入口参数和返回值情况*/
func dummy(b int) int {

	/*声明一个c赋值进入参数并返回*/
	var c int
	c = b
	return c
}

/*空函数，什么也不做*/
func void() {

}

func main() {
	/*声明a变量并打印*/
	var a int
	void()
	fmt.Println(a, dummy(0))
}
